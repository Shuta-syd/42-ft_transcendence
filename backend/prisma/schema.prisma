generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String
  password        String
<<<<<<< HEAD
=======
  twoFactorSecret String?
  isTwoFactorEnabled Boolean @default(false)
  // OneTimePassword OneTimePassword?
>>>>>>> origin/main
  image           String
  isFtLogin       Boolean @default(false)
  friends         User[]   @relation("Friends")
  friendRelation  User[]   @relation("Friends")
  memberships     Member[]
  banned   BanUserOnChatRoom[]
}

// TODO: auth.serviceでuserテーブルを操作したくないから、OneTimePasswordテーブルで別操作したい
// model OneTimePassword {
//   authUser User @relation(fields: [authUserId], references: [id])
//   authUserId String @id
//   twoFactorSecret String?
//   isTwoFactorEnabled Boolean @default(false)
// }

model Member {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  roomId   String
  userId   String
  room     ChatRoom @relation(fields: [roomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  role   MemberRole  @default(NORMAL)
  isMute Boolean @default(false)
}

model ChatRoom {
  id       String      @id @default(uuid())
  name     String      @default("unknown")
  password String      @default("")
  type     RoomType
  messages Message[]
  members  Member[]
  banned   BanUserOnChatRoom[]
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  message   String
  roomId    String
  room      ChatRoom @relation(fields: [roomId], references: [id])
  senderName String
  senderUserId String
}

model BanUserOnChatRoom {
  id String @id @default(uuid())
  baned_userId String
  banned_user User @relation(fields: [baned_userId], references: [id])
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id])
}

model Match {
  id        Int     @id @default(autoincrement())
  player1   String
  player2   String
  winner_id Int
}

enum MemberRole {
  OWNER
  ADMIN
  NORMAL
}

enum RoomType {
  PUBLIC
  PROTECT
  PRIVATE
  DM
}

enum BanType {
  CHANNEL
  LOCAL
}


model Game {
  id        Int     @id @default(autoincrement())
  player1   String  @unique
  player2   String  @unique
}



model InviteGame {
  id        String  @id @default(uuid())
  player1   String  @unique
  player2   String  @unique
}
